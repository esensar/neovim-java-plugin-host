*java_plugin_host.txt* Description

INTRODUCTION                                     *java_plugin_host*

Java in Neovim!

CONTENTS                                         *java_plugin_host-contents*

  1.  Overview                                   |java_plugin_host-overview|
  2.  Requirements                               |java_plugin_host-requirements|
  3.  Installation                               |java_plugin_host-installation|
  4.  Usage                                      |java_plugin_host-usage|
  5.  Functions                                  |java_plugin_host-functions|
  6.  Issues                                     |java_plugin_host-issues|
  7.  Contributing                               |java_plugin_host-contributing|
  8.  Version                                    |java_plugin_host-version|
  9.  License                                    |java_plugin_host-license|

OVERVIEW                                         *java_plugin_host-overview*

This plugin provides basic facilities for configuring neovim using Java or for
running plugins built for Java (either runnable JARs or special JARs that can
be hosted by this plugin).

REQUIREMENTS                                     *java_plugin_host-requirements*

This plugin requires JDK 17+, Maven and Neovim 0.7.0+.

INSTALLATION                                     *java_plugin_host-installation*

Packer.nvim <https://github.com/wbthomason/packer.nvim>

Add the following to your packer setup: >

  use { 'esensar/neovim-java-plugin-host' }
<

USAGE                                            *java_plugin_host-usage*

Call setup function and define plugins in it. The following shows default options:

  require("java_plugin_host").setup {
    rplugins = {
      load_hosted = true, -- set to false to prevent loading hosted plugins from rplugin/hosted-jar
      load_standalone = false, -- set to true to automatically load and start all plugins from rplugin/jar as standalone plugins
      load_class = false, -- set to true to also load .class files from rplugin/java - useful for quick plugins
      compile_java = false, -- set to true to compile .java files from rplugin/java - set load_class to true to also load them
    },
    common_host = {
      enabled = true, -- set to false to disable common host and hosted plugins
      -- Change to override default common plugins host
      -- This is an executable jar which will be started and host all other plugins
      -- Should be based on com.ensarsarajcic.neovim.java:plugin-host to work properly
      -- Or it should be able to properly process annotations used for plugins
      -- This field can also be defined as string, e.g. "com.ensarsarajcic.neovim.java:plugins-common-host:0.4.6"
      name = {
        group_id = "com.ensarsarajcic.neovim.java",
        artifact_id = "plugins-common-host",
        version = "0.4.6"
      },
      -- When changing common_host.name, this should also be changed to the main class
      -- of the other artifact used as common host
      main_class_name = "com.ensarsarajcic.neovim.java.commonhost.CommonPluginHost",
      -- List hosted plugins here - artifacts from system default maven repositories
      hosted_plugins = {
      -- Example:
      -- {
      --   "group_id": "com.ensarsarajcic.neovim.java",
      --   "artifact": "rplugin-hosted-example",
      --   "version": "0.4.6"
      -- },
      -- or:
      -- "com.ensarsarajcic.neovim.java:rplugin-hosted-example:0.4.6"
      },
      -- Custom repositories
      custom_repositories = {
      -- Example:
      -- "https://maven.pkg.github.com/OWNER/REPOSITORY"
      }
    },
    -- Extend with a list of strings - additional classpath entries
    -- If all classpath entries generated by the plugin are not enough
    classpath_extras = {},
    -- Library logging level - also affects storing of logs from the hosted plugins
    log_level = "info",
    autostart = true, -- set to false to prevent automatic start of plugins - must call start() then
  }

*NOTE**: When adding `.java` classes directly in `rplugin/java`, make sure
to create directories for packages starting from `rplugin/java` as root.
This means that any `.java` classes found in `rplugin/java` directly
should have no package at all (implicit root package).

FUNCTIONS                                        *java_plugin_host-functions*

`require("java_plugin_host").setup()`                  *java_plugin_host.setup*
main function for configuring the plugin,
must be called before using any other function

`require("java_plugin_host").start()`                  *java_plugin_host.start*
start common plugin host and all standalone plugins
needed only if `autostart = false` or explicitly stopped

`require("java_plugin_host").stop()`                    *java_plugin_host.stop*
stop common plugin host and all standalone plugins

`require("java_plugin_host").restart()`              *java_plugin_host.restart*
restart common plugin host and all standalone plugins
works only if already running

                                                            *:NeovimJavaLogs*
`require("java_plugin_host").open_logs(key)`       *java_plugin_host.open_logs*
open plugin logs - common logs if key is nil,
otherwise specific standalone plugin logs
also mapped to `NeovimJavaLogs` - supports autocomplete

                                         *java_plugin_host.rebuild_classpath*
`require("java_plugin_host").rebuild_classpath(callback)`
rebuild classpath used by the plugin and call callback with new classpath
can be useful to recompile all config and then restart the plugin

`require("java_plugin_host").request(...)`           *java_plugin_host.request*
shortcut for `rpcrequest` which uses common host job id >

  require("java_plugin_host").request("my_custom_request_handler", "arg1")

<

`require("java_plugin_host").notify(...)`             *java_plugin_host.notify*
shortcut for `rpcnotify` which uses common host job id >

  require("java_plugin_host").notify("my_custom_notification_handler", "arg1")

<

                                        *java_plugin_host.get_standalone_jobs*
`require("java_plugin_host").get_standalone_jobs()`
returns table with all running standalone jobs


Classpath can also be directly accessed with
`require("java_plugin_host").classpath` (only after `setup()` call).

If using [nvim-jdtls](https://github.com/mfussenegger/nvim-jdtls),
it can be configured to add classpath of the common host.
This enables writing configuration directly
in nvim config `rplugin/java` directory, as any other configuration file.
It is recommended to keep separate nvim-jdtls configuration for nvim config,
to prevent showing plugin autocomplete suggestions in other Java code.
Example configuration can be found in
https://github.com/esensar/dotfiles/blob/main/symlinks/config/nvim/lua/esensar/lsp/jdtls_setup.lua.

  config.settings = {
    java = {
      ...
      project = {
        referencedLibraries = require("java_plugin_host").classpath,
      },
      ...
    },
  }

ISSUES                                           *java_plugin_host-issues*

If you experience issues using plugin, please report them at
<https://github.com/esensar/neovim-java-plugin-host/issues>.

CONTRIBUTING                                     *java_plugin_host-contributing*

Feel free to look at already reported issues at
<https://github.com/esensar/neovim-java-plugin-host/issues>.
If available, check out CONTRIBUTING.md in the repository.
Otherwise, feel free to create a new issue or pull request.

VERSION                                          *java_plugin_host-version*

Version 0.1.3

LICENSE                                          *java_plugin_host-license*

vim:tw=78:ts=2:ft=help:norl:
